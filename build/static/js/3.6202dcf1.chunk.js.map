{"version":3,"sources":["../node_modules/semantic-ui-react/dist/es/collections/Grid/GridColumn.js","../node_modules/semantic-ui-react/dist/es/collections/Grid/GridRow.js","../node_modules/semantic-ui-react/dist/es/collections/Grid/Grid.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/SegmentGroup.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/SegmentInline.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/Segment.js","containers/Auth/Auth.js"],"names":["GridColumn","props","children","className","computer","color","floated","largeScreen","mobile","only","stretched","tablet","textAlign","verticalAlign","widescreen","width","classes","classnames_default","Object","classNameBuilders","rest","getUnhandledProps","ElementType","getElementType","react_default","a","createElement","extends_default","handledProps","propTypes","create","factories","Grid_GridColumn","GridRow","centered","columns","divided","reversed","Grid_GridRow","Grid","celled","container","doubling","inverted","padded","relaxed","stackable","Column","Row","Grid_Grid","SegmentGroup","compact","content","horizontal","piled","raised","size","stacked","lib","isNil","Segment_SegmentGroup","SegmentInline","Segment_SegmentInline","Segment","attached","basic","circular","clearing","disabled","loading","placeholder","secondary","tertiary","vertical","Group","Inline","Segment_Segment","Auth","state","form","email","password","fullName","isSignup","errorMessage","isLoading","auth","authRedirectPath","handleChange","e","_ref","name","value","objectSpread","_this","setState","handleSubmit","validate","data","onAuth","rules","console","log","validation","Validator","isError","fails","errors","getValidationMessages","validationMessages","push","Message","key","error","toggleButtons","authRedirect","this","isAuthenticated","react_router","to","_this$state$form","buttonTitle","switchButtonTitle","Dimmer","active","Loader","style","height","maxWidth","Header","as","length","display","toConsumableArray","Form","onSubmit","noValidate","Input","fluid","icon","iconPosition","autoComplete","onChange","type","Button","href","onClick","Component","connect","token","dispatch","actions","onSetAuthRedirectPath"],"mappings":"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","file":"static/js/3.6202dcf1.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, createShorthandFactory, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useValueAndKey, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A column sub-component for Grid.\n */\n\nfunction GridColumn(props) {\n  var children = props.children,\n      className = props.className,\n      computer = props.computer,\n      color = props.color,\n      floated = props.floated,\n      largeScreen = props.largeScreen,\n      mobile = props.mobile,\n      only = props.only,\n      stretched = props.stretched,\n      tablet = props.tablet,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      widescreen = props.widescreen,\n      width = props.width;\n  var classes = cx(color, useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), useVerticalAlignProp(verticalAlign), useWidthProp(computer, 'wide computer'), useWidthProp(largeScreen, 'wide large screen'), useWidthProp(mobile, 'wide mobile'), useWidthProp(tablet, 'wide tablet'), useWidthProp(widescreen, 'wide widescreen'), useWidthProp(width, 'wide'), 'column', className);\n  var rest = getUnhandledProps(GridColumn, props);\n  var ElementType = getElementType(GridColumn, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridColumn.handledProps = [\"as\", \"children\", \"className\", \"color\", \"computer\", \"floated\", \"largeScreen\", \"mobile\", \"only\", \"stretched\", \"tablet\", \"textAlign\", \"verticalAlign\", \"widescreen\", \"width\"];\nGridColumn.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A grid column can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A column can specify a width for a computer. */\n  computer: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can sit flush against the left or right edge of a row. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A column can specify a width for a large screen device. */\n  largeScreen: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can specify a width for a mobile device. */\n  mobile: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can appear only for a specific device, or screen sizes. */\n  only: customPropTypes.multipleProp(SUI.VISIBILITY),\n\n  /** A column can stretch its contents to take up the entire grid or row height. */\n  stretched: PropTypes.bool,\n\n  /** A column can specify a width for a tablet device. */\n  tablet: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A column can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A column can specify a width for a wide screen device. */\n  widescreen: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** Represents width of column. */\n  width: customPropTypes.every([customPropTypes.disallow(['computer', 'largeScreen', 'mobile', 'tablet', 'widescreen']), PropTypes.oneOf(SUI.WIDTHS)])\n} : {};\nGridColumn.create = createShorthandFactory(GridColumn, function (children) {\n  return {\n    children: children\n  };\n});\nexport default GridColumn;","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A row sub-component for Grid.\n */\n\nfunction GridRow(props) {\n  var centered = props.centered,\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      columns = props.columns,\n      divided = props.divided,\n      only = props.only,\n      reversed = props.reversed,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx(color, useKeyOnly(centered, 'centered'), useKeyOnly(divided, 'divided'), useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'row', className);\n  var rest = getUnhandledProps(GridRow, props);\n  var ElementType = getElementType(GridRow, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridRow.handledProps = [\"as\", \"centered\", \"children\", \"className\", \"color\", \"columns\", \"divided\", \"only\", \"reversed\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGridRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A row can have its columns centered. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A grid row can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Represents column count per line in Row. */\n  columns: PropTypes.oneOf([].concat(_toConsumableArray(SUI.WIDTHS), ['equal'])),\n\n  /** A row can have dividers between its columns. */\n  divided: PropTypes.bool,\n\n  /** A row can appear only for a specific device, or screen sizes. */\n  only: customPropTypes.multipleProp(SUI.VISIBILITY),\n\n  /** A row can specify that its columns should reverse order at different device sizes. */\n  reversed: customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A row can stretch its contents to take up the entire column height. */\n  stretched: PropTypes.bool,\n\n  /** A row can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A row can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nexport default GridRow;","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport GridColumn from './GridColumn';\nimport GridRow from './GridRow';\n/**\n * A grid is used to harmonize negative space in a layout.\n */\n\nfunction Grid(props) {\n  var celled = props.celled,\n      centered = props.centered,\n      children = props.children,\n      className = props.className,\n      columns = props.columns,\n      container = props.container,\n      divided = props.divided,\n      doubling = props.doubling,\n      inverted = props.inverted,\n      padded = props.padded,\n      relaxed = props.relaxed,\n      reversed = props.reversed,\n      stackable = props.stackable,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', useKeyOnly(centered, 'centered'), useKeyOnly(container, 'container'), useKeyOnly(doubling, 'doubling'), useKeyOnly(inverted, 'inverted'), useKeyOnly(stackable, 'stackable'), useKeyOnly(stretched, 'stretched'), useKeyOrValueAndKey(celled, 'celled'), useKeyOrValueAndKey(divided, 'divided'), useKeyOrValueAndKey(padded, 'padded'), useKeyOrValueAndKey(relaxed, 'relaxed'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'grid', className);\n  var rest = getUnhandledProps(Grid, props);\n  var ElementType = getElementType(Grid, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGrid.handledProps = [\"as\", \"celled\", \"centered\", \"children\", \"className\", \"columns\", \"container\", \"divided\", \"doubling\", \"inverted\", \"padded\", \"relaxed\", \"reversed\", \"stackable\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGrid.Column = GridColumn;\nGrid.Row = GridRow;\nGrid.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A grid can have rows divided into cells. */\n  celled: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['internally'])]),\n\n  /** A grid can have its columns centered. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Represents column count per row in Grid. */\n  columns: PropTypes.oneOf([].concat(_toConsumableArray(SUI.WIDTHS), ['equal'])),\n\n  /** A grid can be combined with a container to use the available layout and alignment. */\n  container: PropTypes.bool,\n\n  /** A grid can have dividers between its columns. */\n  divided: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['vertically'])]),\n\n  /** A grid can double its column width on tablet and mobile sizes. */\n  doubling: PropTypes.bool,\n\n  /** A grid's colors can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** A grid can preserve its vertical and horizontal gutters on first and last columns. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['horizontally', 'vertically'])]),\n\n  /** A grid can increase its gutters to allow for more negative space. */\n  relaxed: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A grid can specify that its columns should reverse order at different device sizes. */\n  reversed: customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A grid can have its columns stack on-top of each other after reaching mobile breakpoints. */\n  stackable: PropTypes.bool,\n\n  /** A grid can stretch its contents to take up the entire grid height. */\n  stretched: PropTypes.bool,\n\n  /** A grid can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A grid can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nexport default Grid;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly } from '../../lib';\n/**\n * A group of segments can be formatted to appear together.\n */\n\nfunction SegmentGroup(props) {\n  var children = props.children,\n      className = props.className,\n      compact = props.compact,\n      content = props.content,\n      horizontal = props.horizontal,\n      piled = props.piled,\n      raised = props.raised,\n      size = props.size,\n      stacked = props.stacked;\n  var classes = cx('ui', size, useKeyOnly(compact, 'compact'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(piled, 'piled'), useKeyOnly(raised, 'raised'), useKeyOnly(stacked, 'stacked'), 'segments', className);\n  var rest = getUnhandledProps(SegmentGroup, props);\n  var ElementType = getElementType(SegmentGroup, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegmentGroup.handledProps = [\"as\", \"children\", \"className\", \"compact\", \"content\", \"horizontal\", \"piled\", \"raised\", \"size\", \"stacked\"];\nSegmentGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A segment may take up only as much space as is necessary. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Formats content to be aligned horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** Formatted to look like a pile of pages. */\n  piled: PropTypes.bool,\n\n  /** A segment group may be formatted to raise above the page. */\n  raised: PropTypes.bool,\n\n  /** A segment group can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** Formatted to show it contains multiple pages. */\n  stacked: PropTypes.bool\n} : {};\nexport default SegmentGroup;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A placeholder segment can be inline.\n */\n\nfunction SegmentInline(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('inline', className);\n  var rest = getUnhandledProps(SegmentInline, props);\n  var ElementType = getElementType(SegmentInline, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegmentInline.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nSegmentInline.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default SegmentInline;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useTextAlignProp, useValueAndKey } from '../../lib';\nimport SegmentGroup from './SegmentGroup';\nimport SegmentInline from './SegmentInline';\n/**\n * A segment is used to create a grouping of related content.\n */\n\nfunction Segment(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      children = props.children,\n      circular = props.circular,\n      className = props.className,\n      clearing = props.clearing,\n      color = props.color,\n      compact = props.compact,\n      content = props.content,\n      disabled = props.disabled,\n      floated = props.floated,\n      inverted = props.inverted,\n      loading = props.loading,\n      placeholder = props.placeholder,\n      padded = props.padded,\n      piled = props.piled,\n      raised = props.raised,\n      secondary = props.secondary,\n      size = props.size,\n      stacked = props.stacked,\n      tertiary = props.tertiary,\n      textAlign = props.textAlign,\n      vertical = props.vertical;\n  var classes = cx('ui', color, size, useKeyOnly(basic, 'basic'), useKeyOnly(circular, 'circular'), useKeyOnly(clearing, 'clearing'), useKeyOnly(compact, 'compact'), useKeyOnly(disabled, 'disabled'), useKeyOnly(inverted, 'inverted'), useKeyOnly(loading, 'loading'), useKeyOnly(placeholder, 'placeholder'), useKeyOnly(piled, 'piled'), useKeyOnly(raised, 'raised'), useKeyOnly(secondary, 'secondary'), useKeyOnly(stacked, 'stacked'), useKeyOnly(tertiary, 'tertiary'), useKeyOnly(vertical, 'vertical'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(padded, 'padded'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), 'segment', className);\n  var rest = getUnhandledProps(Segment, props);\n  var ElementType = getElementType(Segment, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegment.handledProps = [\"as\", \"attached\", \"basic\", \"children\", \"circular\", \"className\", \"clearing\", \"color\", \"compact\", \"content\", \"disabled\", \"floated\", \"inverted\", \"loading\", \"padded\", \"piled\", \"placeholder\", \"raised\", \"secondary\", \"size\", \"stacked\", \"tertiary\", \"textAlign\", \"vertical\"];\nSegment.Group = SegmentGroup;\nSegment.Inline = SegmentInline;\nSegment.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Attach segment to other content, like a header. */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n\n  /** A basic segment has no special formatting. */\n  basic: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** A segment can be circular. */\n  circular: PropTypes.bool,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A segment can clear floated content. */\n  clearing: PropTypes.bool,\n\n  /** Segment can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A segment may take up only as much space as is necessary. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A segment may show its content is disabled. */\n  disabled: PropTypes.bool,\n\n  /** Segment content can be floated to the left or right. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A segment can have its colors inverted for contrast. */\n  inverted: PropTypes.bool,\n\n  /** A segment may show its content is being loaded. */\n  loading: PropTypes.bool,\n\n  /** A segment can increase its padding. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A segment can be used to reserve space for conditionally displayed content. */\n  placeholder: PropTypes.bool,\n\n  /** Formatted to look like a pile of pages. */\n  piled: PropTypes.bool,\n\n  /** A segment may be formatted to raise above the page. */\n  raised: PropTypes.bool,\n\n  /** A segment can be formatted to appear less noticeable. */\n  secondary: PropTypes.bool,\n\n  /** A segment can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** Formatted to show it contains multiple pages. */\n  stacked: PropTypes.bool,\n\n  /** A segment can be formatted to appear even less noticeable. */\n  tertiary: PropTypes.bool,\n\n  /** Formats content to be aligned as part of a vertical group. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** Formats content to be aligned vertically. */\n  vertical: PropTypes.bool\n} : {};\nexport default Segment;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { checkValidity } from \"../../shared/utility\"\nimport { Redirect } from 'react-router-dom';\nimport Validator from \"validatorjs\"\n\nimport { Button, Form, Message, Dimmer, Loader, Grid, Header, Segment } from 'semantic-ui-react'\n\nimport * as actions from '../../store/actions/index';\n\nclass Auth extends Component {\n\n    state = {\n        form: {\n            email: \"\",\n            password: \"\",\n            fullName: \"\"\n        },\n        isSignup: false,\n        errorMessage: {\n            email: \"\",\n            password: \"\"\n        },\n        isLoading: false,\n        auth: {\n            authRedirectPath: \"/\"\n        }\n    }\n\n    handleChange = (e, { name, value }) => {\n        let form = { ...this.state.form }\n        form[name] = value;\n        this.setState({ form });\n    }\n\n    handleSubmit = () => {\n        if (!this.validate()) {\n            let data = { ...this.state.form };\n            this.props.onAuth(data, this.state.isSignup);\n        }\n    }\n\n    validate = () => {\n        const rules = {\n            email: 'required|email|min:6|max:45',\n            password: 'required|min:6|max:20',\n            fullName: 'required|min:6|max:35'\n        };\n\n        let form = {...this.state.form};\n\n        if (!this.state.isSignup) {\n            delete form.fullName;\n            delete rules.fullName;\n        }\n\n        console.log(form, rules)\n\n        let validation = new Validator(form, rules);\n        let isError = validation.fails();\n        this.setState({ errorMessage: validation.errors.errors });\n        return isError;\n    }\n\n    getValidationMessages = () => {\n        let validationMessages = [];\n        if (this.state.errorMessage.email) {\n            validationMessages.push(<Message key=\"1\"\n                size='mini'\n                error\n                content={this.state.errorMessage.email} />)\n        }\n        if (this.state.errorMessage.password) {\n            validationMessages.push(<Message key=\"2\"\n                size='mini'\n                error\n                content={this.state.errorMessage.password} />)\n        }\n        if (this.state.errorMessage.fullName) {\n            validationMessages.push(<Message key=\"3\"\n                size='mini'\n                error\n                content={this.state.errorMessage.fullName} />)\n        }\n        return validationMessages;\n    }\n\n    toggleButtons = () => {\n        this.setState({\n            isSignup: !this.state.isSignup,\n            errorMessage: []\n        });\n    }\n\n    render() {\n\n        let authRedirect = null;\n        if (this.props.isAuthenticated) {\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\n        }\n        let { email, password, fullName } = this.state.form;\n\n        let authJsx;\n        let hrefLink = \"#\";\n        const buttonTitle = this.state.isSignup ? \"Sign Up\" : \"Sign In\";\n        const switchButtonTitle = this.state.isSignup ? \"Sign in\" : \"Sign up\";\n        let validationMessages = this.getValidationMessages();\n\n        if (!this.state.isLoading) {\n            authJsx = <Grid textAlign='center' style={{ height: '70vh' }} verticalAlign='middle'>\n                {authRedirect}\n                <Grid.Column style={{ maxWidth: 450 }}>\n                    <Header as='h2' color='teal' textAlign='center'>\n                        {buttonTitle}\n                    </Header>\n                    {validationMessages.length ? <Segment style={{ display: \"block\" }} stacked>\n                        {[...validationMessages]}\n                    </Segment> : null}\n                    <Form size='large' onSubmit={this.handleSubmit} noValidate>\n                        <Segment stacked>\n                            {\n                                this.state.isSignup ?\n                                    <Form.Input\n                                        fluid\n                                        icon='user'\n                                        iconPosition='left'\n                                        placeholder='Full Name'\n                                        autoComplete='off'\n                                        name='fullName'\n                                        value={fullName}\n                                        onChange={this.handleChange} /> : null\n                            }\n                            <Form.Input\n                                fluid\n                                icon='user'\n                                iconPosition='left'\n                                placeholder='E-mail address'\n                                autoComplete='off'\n                                name='email'\n                                value={email}\n                                onChange={this.handleChange} />\n                            <Form.Input\n                                fluid\n                                icon='lock'\n                                iconPosition='left'\n                                placeholder='Password'\n                                type='password'\n                                autoComplete='off'\n                                name='password'\n                                value={password}\n                                onChange={this.handleChange}\n                            />\n                            <Button color='teal' fluid size='large'>\n                                {buttonTitle}\n                            </Button>\n                        </Segment>\n                    </Form>\n                    <Message>\n                        {this.state.isSignup ? \"\" : \"New to us?\"} <a href={hrefLink}\n                            onClick={this.toggleButtons}>{switchButtonTitle}</a>\n                    </Message>\n                </Grid.Column>\n            </Grid>\n        } else {\n            authJsx = <Dimmer active><Loader /></Dimmer>\n        }\n\n        return authJsx\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.isLoading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        authRedirectPath: state.auth.authRedirectPath\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (data, isSignup) => dispatch(actions.auth(data, isSignup)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}